{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import cldr from 'cldr';\nimport _ from 'lodash';\nimport debug from 'gengojs-debug';\nvar log = debug('api');\n\n/* Class API */\nclass API {\n  constructor(core) {\n      log.debug(`class: ${API.name}`, `process: constructor`);\n      this.options = core.options;\n      this.context = core;\n    }\n    /* Sets the API*/\n  set() {\n      log.debug(`class: ${API.name}`, `process: set`);\n      var core = this.context;\n\n      /**\n       * The i18n function\n       */\n      var i18n = function() {};\n\n      /**\n       * The l10n function\n       */\n      var l10n = function() {};\n\n      // Set the options\n      var options = this.options.api;\n      _.assign((options.header = {}), this.options.header);\n      debug('api', 'info', 'options exists:', !(!options));\n\n      /**\n       * i18ns the arguments. Note: You can change ID for i18n. See Options.\n       * @param  {...*} arg The arguments to internationalize.\n       * @return {String} Then i18ned string.\n       */\n      i18n[options.global] = function(...args) {\n        log.debug(`class: ${API.name}`, `process: i18n`);\n        return core.parse.apply(core, args);\n      };\n      /**\n      * ### Example\n      * *The following applies only for gengojs-default-parser*\n      *#### Phrase notation with default parser.\n      *```javascript\n      * // Assuming the locale === 'ja',\n      * // a basic phrase returns 'こんにちは'\n      * __('Hello');\n      *\n      * // a basic phrase with sprintf returns 'Bob こんにちは'\n      * __('Hello %s', 'Bob');\n      *\n      * // a basic phrase with interpolation returns 'Bob こんにちは'\n      *  __('Hello {{name}}', {name:'Bob'});\n      *```\n      *#### Bracket notation with default parser.\n      *```javascript\n      * // Assuming the locale === 'ja',\n      * // a basic bracket phrase returns 'おっす'\n      * __('[Hello].informal');\n      *\n      * // a basic bracket phrase with sprintf returns 'Bob おっす'\n      * __('[Hello %].informal', 'Bob');\n      *\n      * // a basic bracket phrase with interpolation returns 'Bob おっす'\n      * __('[Hello {{name}}].informal', {name:'Bob'});\n      *```\n      *#### Dot notation with default parser.\n      *```javascript\n      * // Assuming the locale === 'ja',\n      * // a basic dot phrase returns 'おっす'\n      * __('greeting.hello.informal');\n      *\n      * // a basic dot phrase with sprintf returns 'Bob おっす'\n      * __('greeting.hello.person.informal', 'Bob');\n      *\n      * //a basic dot phrase with interpolation returns 'Bob おっす'\n      * __('greeting.hello.person.informal', {name:'Bob'});\n      *```\n      * \n      *#### All notations with Message Format.\n      *  See [message-format](https://github.com/thetalecrafter/\n        message-format) for documentation.\n      * ```javascript\n      * // Assuming the locale === 'en-us',\n      * // a basic phrase with message formatting\n      * // returns \"You took 4,000 pictures since Jan 1, 2015 9:33:04 AM\"\n      * __('You took {n,number} pictures since \n        {d,date} {d,time}', { n:4000, d:new Date() });\n      *\n      * // a basic bracket phrase with message formatting\n      * // returns \"You took 4,000 pictures since Jan 1, 2015 9:33:04 AM\"\n      * __('[You took {n, numbers} pictures].since.date', \n        { n:4000, d:new Date() });\n      *\n      * // a basic dot phrase with message formatting\n      * // returns \"You took 4,000 pictures since Jan 1, 2015 9:33:04 AM\"\n      * __('pictures.since.date', { n:4000, d:new Date() });\n      *```\n      */\n\n      /**\n       * @method language\n       * @description Returns the name of the current locale.\n       * @param  {string} id The locale to change.\n       * @return {String} Then i18ned string.\n       */\n      i18n.language = function(id) {\n        log.debug(`class: ${API.name}`, `process: i18n.languge`);\n        // de-normalize locale\n        var locale = core.header.getLocale();\n        locale = locale.toLowerCase().replace('-', '_');\n        // denormalize id\n        id = id ? id.toLowerCase().replace('_', '-') : locale;\n        // store the languages\n        return cldr.extractLanguageDisplayNames(locale)[id];\n      };\n\n\n      /**\n       * ### Example\n       *#### Get the current language.\n       *```javascript\n       * // assuming locale === 'en-us'\n       * // returns 'American English'\n       * __.languages();\n       *```\n       *#### Get the current language in another locale. \n       *```javascript\n       * // assuming locale === 'en-us'\n       * // returns 'English'\n       * __.language('en');\n       *\n       * // returns 'Japanese'\n       * __.language('ja');\n       *```\n       */\n\n      /**\n       * @method languages\n       * @description Returns the names of the supported locale.\n       * @param  {String | Array} arg The locale to change or the supported locales.\n       * @param {Array} supported The supported locales.\n       * @return {String} Then i18ned string.\n       */\n      i18n.languages = (arg, supported) => {\n        log.debug(`class: ${API.name}`, `process: i18n.languges`);\n        var _supported = [];\n        supported = (_.isArray(arg) ? arg : supported) ||\n          options.header.supported;\n        arg = _.isArray(arg) ? undefined : arg;\n        supported.forEach(locale => {\n          arg = arg ? arg.toLowerCase() :\n            core.header.getLocale();\n          arg = arg.replace('_', '-');\n          // de-normalize locales\n          locale = locale.toLowerCase().replace('-', '_');\n          // store the languages\n          _supported.push(cldr.extractLanguageDisplayNames(arg)[locale]);\n        }, core);\n        return _supported;\n      };\n\n      /**\n       * ### Example\n       * #### Get the supported languages.\n       *```javascript\n       * // Assuming locale === 'en-us'\n       * // returns ['American English', 'Japanese']\n       * __.lanugages();\n       *```\n       *#### Get the current languages in another locale. \n       *```javascript\n       * // Assuming locale === 'en-us'\n       * // returns ['アメリカ英語', '日本語']\n       * __.languages('ja');\n       *```\n       *#### Override the supported locales.\n       *```javascript\n       * // Assuming locale === 'en-us'\n       * // returns ['English', 'Japanese']\n       * __.languages(['en', 'ja']);\n       *```\n       *#### Override the supported locales and get the languages in another locale.\n       *```javascript\n       * // Assuming locale === 'en-us'\n       * // returns ['英語', '日本語']\n       * __.languages('ja', ['en', 'ja']);\n       *```\n       */\n\n      /**\n       * @method locale\n       * @description Sets or gets the locale.\n       * @param  {String} locale The locale to set or get.\n       * @return {String} The locale.\n       */\n      i18n.locale = (locale) => {\n        log.debug(`class: ${API.name}`, `process: i18n.locale`);\n        return locale ?\n          core.header.setLocale(locale) :\n          core.header.detectLocale ?\n          core.header.detectLocale() :\n          core.header.getLocale();\n      };\n\n      /**\n       * @description Get the cldr.\n       * @return {CLDR} The instance of cldr.\n       * @public\n       */\n      i18n.cldr = () => {\n        log.debug(`class: ${API.name}`, `process: i18n.cldr`);\n        return cldr;\n      };\n\n      /**\n       * Returns the catalog\n       * @param  {String} locale The locale to find\n       * @return {Object}        The catalog\n       */\n      i18n.catalog = (locale) => {\n        log.debug(`class: ${API.name}`, `process: i18n.catalog`);\n        return core.backend.catalog(locale);\n      };\n\n      /**\n       * l10n\n       * @description Localizes date, time and numbers.\n       * See [Tokei](https://github.com/iwatakeshi/tokei) for documentation.\n       * Note: You can change ID for l10n. See Configuration.\n       * @param  {String}  locale The locale to override.\n       * @return {Tokei} The instance of Tokei.\n       * @public\n       */\n      l10n[options.localize] = function(...args) {\n        log.debug(`class: ${API.name}`, `process: i10n`);\n        return core.localize.apply(core, args);\n      };\n      /**\n       * ### Example\n       * #### Get the current locale.\n       *```javascript\n       * // Assuming locale === 'en-us'\n       * // returns 'en-us'\n       * __.locale()\n       *```\n       *#### Set the locale.\n       *```javascript\n       * // Asumming locale === 'en-us'\n       * // sets and returns 'ja'\n       * __.locale('ja')\n       *```\n       */\n      return {\n        i18n: i18n,\n        l10n: l10n\n      };\n    }\n    /**\n     * Returns the API\n     * @returns The API\n     */\n  get() {\n      log.debug(`class: ${API.name}`, `process: get`);\n      return this.apply({});\n    }\n    /* \n     * Applies the API to any object\n     * @private\n     */\n  apply(object) {\n    log.debug(`class: ${API.name}`, `process: apply`);\n    var core = this.context;\n    _.forEach(this.set(), function(item, key) {\n      switch (key) {\n        case 'i18n':\n          _.forOwn(item, function(api, subkey) {\n            if (!object[subkey]) {\n              if (subkey === this.options.api.global)\n                object[subkey] = api.bind(core);\n              else\n                object[this.options.api.global][subkey] = api.bind(core);\n            }\n          }, this);\n          break;\n        case 'l10n':\n          _.forOwn(item, function(api, subkey) {\n            if (!object[subkey]) {\n              if (subkey === this.options.api.localize)\n                object[subkey] = api.bind(core);\n            }\n          }, this);\n          break;\n      }\n    }, this);\n    log.debug(`class: ${API.name}`, 'API exists:',\n      _.has(object, this.options.api.global) &&\n      _.has(object, this.options.api.localize));\n    return object;\n  }\n}\n\nexport default function api() {\n  'use strict';\n  return {\n    main: function ship() {\n      var object = arguments[0] || arguments[1] || {};\n      log.debug('object exists:', !!object);\n      return new API(this).apply(object);\n    },\n    package: _.merge({\n      type: 'api'\n    }, require('../package')),\n    defaults: require('../defaults')\n  };\n}"],"sourceRoot":"/source/"}